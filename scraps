# filename = 'test_images/mt.mp4'
# filename2 = 'test_images/mtc.png'
# template_name = 'templates/tt'
# img = cv2.imread(filename)
# img2 = cv2.imread(filename2)
# img2 = img2[99:632, 119:1152]
# src_points = []
# width, height = (1024, 512)
# dst_points = np.float32([(0,0), (width,0), (width,height), (0,height)]).reshape(-1,1,2)
# for i in range(1, 5):
#    template = cv2.imread(template_name + str(i) + '.png', 0)
#    w, h = template.shape[::-1]
#    targets = find_image_targets(img, template, 0.65)
#    src_points.append(list(zip(*targets[::-1]))[0])
#    squares_on_img(img, targets, w, h)
# src_points.append(src_points.pop(0))
# src_points.append(src_points.pop(0))
# src_points.append(src_points.pop(0))
# M, mask = cv2.findHomography(np.float32(src_points).reshape(-1,1,2), dst_points, cv2.RANSAC,5.0)
# im_dst = cv2.warpPerspective(img, M, (width, height))


        for (markerCorner, markerID) in zip(corners, ids):
            corners = markerCorner.reshape((4, 2))
            (topLeft, topRight, bottomRight, bottomLeft) = corners
            topRight = (int(topRight[0]), int(topRight[1]))
            bottomRight = (int(bottomRight[0]), int(bottomRight[1]))
            bottomLeft = (int(bottomLeft[0]), int(bottomLeft[1]))
            topLeft = (int(topLeft[0]), int(topLeft[1]))
            cv2.line(frame, topLeft, topRight, (0, 255, 0), 2)
            cv2.line(frame, topRight, bottomRight, (0, 255, 0), 2)
            cv2.line(frame, bottomRight, bottomLeft, (0, 255, 0), 2)
            cv2.line(frame, bottomLeft, topLeft, (0, 255, 0), 2)


# else:
        #     dst_points = [(0, 0), (0, int(h)), (int(w), int(h)), (int(w), 0)]
        #     src_points = [(x - int(w), y - int(h)), (x - int(w), y + int(h)), (x + int(w), y + int(h)),
        #                   (x + int(w), y - int(h))]
        #     for cord in create_homography_and_wrap(
        #             cv.cvtColor(thresh_gray, cv.COLOR_GRAY2RGB),
        #             np.float32(src_points).reshape(-1, 1, 2),
        #             np.float32(dst_points).reshape(-1, 1, 2),
        #             int(h),
        #             int(w)
        #     ):
        #         output = cv2.circle(output, (cord[0], cord[1]), cord[2], (0, 0, 255), 4)